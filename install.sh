#!/usr/bin/env bash
# This file is auto-generated by scripts/build.sh
# DO NOT EDIT - modify scripts/src/*.src.sh instead and run 'make buildscripts'

# ── Embedded hook files ── that's a base64 of scripts/git-undo-hook.bash ────
EMBEDDED_BASH_HOOK='IyBWYXJpYWJsZSB0byBzdG9yZSB0aGUgZ2l0IGNvbW1hbmQgdGVtcG9yYXJpbHkKR0lUX0NPTU1BTkRfVE9fTE9HPSIiCgojIEZ1bmN0aW9uIHRvIHN0b3JlIHRoZSBnaXQgY29tbWFuZCB0ZW1wb3JhcmlseQpzdG9yZV9naXRfY29tbWFuZCgpIHsKICBsb2NhbCByYXdfY21kPSIkMSIKICBsb2NhbCBoZWFkPSR7cmF3X2NtZCUlICp9CiAgbG9jYWwgcmVzdD0ke3Jhd19jbWQjIiRoZWFkIn0KCiAgIyBDaGVjayBpZiB0aGUgY29tbWFuZCBpcyBhbiBhbGlhcyBhbmQgZXhwYW5kIGl0CiAgaWYgYWxpYXMgIiRoZWFkIiAmPi9kZXYvbnVsbDsgdGhlbgogICAgbG9jYWwgZGVmPSQoYWxpYXMgIiRoZWFkIikKICAgICMgRXh0cmFjdCB0aGUgZXhwYW5zaW9uIGZyb20gYWxpYXMgb3V0cHV0IChmb3JtYXQ6IGFsaWFzIG5hbWU9J2V4cGFuc2lvbicpCiAgICBsb2NhbCBleHBhbnNpb249JHtkZWYjKlwnfQogICAgZXhwYW5zaW9uPSR7ZXhwYW5zaW9uJVwnfQogICAgcmF3X2NtZD0iJHtleHBhbnNpb259JHtyZXN0fSIKICBmaQoKICAjIE9ubHkgc3RvcmUgaWYgaXQncyBhIGdpdCBjb21tYW5kCiAgW1sgIiRyYXdfY21kIiA9PSBnaXRcICogXV0gfHwgcmV0dXJuCiAgR0lUX0NPTU1BTkRfVE9fTE9HPSIkcmF3X2NtZCIKfQoKIyBGdW5jdGlvbiB0byBsb2cgdGhlIGNvbW1hbmQgb25seSBpZiBpdCB3YXMgc3VjY2Vzc2Z1bApsb2dfc3VjY2Vzc2Z1bF9naXRfY29tbWFuZCgpIHsKICAjIENoZWNrIGlmIHdlIGhhdmUgYSBnaXQgY29tbWFuZCB0byBsb2cgYW5kIGlmIHRoZSBwcmV2aW91cyBjb21tYW5kIHdhcyBzdWNjZXNzZnVsCiAgaWYgW1sgLW4gIiRHSVRfQ09NTUFORF9UT19MT0ciICYmICQ/IC1lcSAwIF1dOyB0aGVuCiAgICBHSVRfVU5ET19JTlRFUk5BTF9IT09LPTEgY29tbWFuZCBnaXQtdW5kbyAtLWhvb2s9IiRHSVRfQ09NTUFORF9UT19MT0ciCiAgZmkKICAjIENsZWFyIHRoZSBzdG9yZWQgY29tbWFuZAogIEdJVF9DT01NQU5EX1RPX0xPRz0iIgp9CgojIHRyYXAgZG9lcyB0aGUgYWN0dWFsIGhvb2tpbmc6IG1ha2luZyBhbiBleHRyYSBnaXQtdW5kbyBjYWxsIGZvciBldmVyeSBnaXQgY29tbWFuZC4KdHJhcCAnc3RvcmVfZ2l0X2NvbW1hbmQgIiRCQVNIX0NPTU1BTkQiJyBERUJVRwoKIyBTZXQgdXAgUFJPTVBUX0NPTU1BTkQgdG8gbG9nIHN1Y2Nlc3NmdWwgY29tbWFuZHMgYWZ0ZXIgZXhlY3V0aW9uCmlmIFtbIC16ICIkUFJPTVBUX0NPTU1BTkQiIF1dOyB0aGVuCiAgUFJPTVBUX0NPTU1BTkQ9ImxvZ19zdWNjZXNzZnVsX2dpdF9jb21tYW5kIgplbHNlCiAgUFJPTVBUX0NPTU1BTkQ9IiRQUk9NUFRfQ09NTUFORDsgbG9nX3N1Y2Nlc3NmdWxfZ2l0X2NvbW1hbmQiCmZp'
EMBEDDED_BASH_TEST_HOOK='IyBWYXJpYWJsZSB0byBzdG9yZSB0aGUgZ2l0IGNvbW1hbmQgdGVtcG9yYXJpbHkKR0lUX0NPTU1BTkRfVE9fTE9HPSIiCgojIEZ1bmN0aW9uIHRvIHN0b3JlIHRoZSBnaXQgY29tbWFuZCB0ZW1wb3JhcmlseQpzdG9yZV9naXRfY29tbWFuZCgpIHsKICBsb2NhbCByYXdfY21kPSIkMSIKICBsb2NhbCBoZWFkPSR7cmF3X2NtZCUlICp9CiAgbG9jYWwgcmVzdD0ke3Jhd19jbWQjIiRoZWFkIn0KCiAgIyBDaGVjayBpZiB0aGUgY29tbWFuZCBpcyBhbiBhbGlhcyBhbmQgZXhwYW5kIGl0CiAgaWYgYWxpYXMgIiRoZWFkIiAmPi9kZXYvbnVsbDsgdGhlbgogICAgbG9jYWwgZGVmPSQoYWxpYXMgIiRoZWFkIikKICAgICMgRXh0cmFjdCB0aGUgZXhwYW5zaW9uIGZyb20gYWxpYXMgb3V0cHV0IChmb3JtYXQ6IGFsaWFzIG5hbWU9J2V4cGFuc2lvbicpCiAgICBsb2NhbCBleHBhbnNpb249JHtkZWYjKlwnfQogICAgZXhwYW5zaW9uPSR7ZXhwYW5zaW9uJVwnfQogICAgcmF3X2NtZD0iJHtleHBhbnNpb259JHtyZXN0fSIKICBmaQoKICAjIE9ubHkgc3RvcmUgaWYgaXQncyBhIGdpdCBjb21tYW5kCiAgW1sgIiRyYXdfY21kIiA9PSBnaXRcICogXV0gfHwgcmV0dXJuCiAgR0lUX0NPTU1BTkRfVE9fTE9HPSIkcmF3X2NtZCIKfQoKIyBGdW5jdGlvbiB0byBsb2cgdGhlIGNvbW1hbmQgb25seSBpZiBpdCB3YXMgc3VjY2Vzc2Z1bApsb2dfc3VjY2Vzc2Z1bF9naXRfY29tbWFuZCgpIHsKICAjIENoZWNrIGlmIHdlIGhhdmUgYSBnaXQgY29tbWFuZCB0byBsb2cgYW5kIGlmIHRoZSBwcmV2aW91cyBjb21tYW5kIHdhcyBzdWNjZXNzZnVsCiAgaWYgW1sgLW4gIiRHSVRfQ09NTUFORF9UT19MT0ciICYmICQ/IC1lcSAwIF1dOyB0aGVuCiAgICBHSVRfVU5ET19JTlRFUk5BTF9IT09LPTEgY29tbWFuZCBnaXQtdW5kbyAtLWhvb2s9IiRHSVRfQ09NTUFORF9UT19MT0ciCiAgZmkKICAjIENsZWFyIHRoZSBzdG9yZWQgY29tbWFuZAogIEdJVF9DT01NQU5EX1RPX0xPRz0iIgp9CgoKIyBUZXN0IG1vZGU6IHByb3ZpZGUgYSBtYW51YWwgd2F5IHRvIGNhcHR1cmUgY29tbWFuZHMKIyBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgaW50ZWdyYXRpb24tdGVzdC5iYXRzLiAKZ2l0KCkgewogICAgY29tbWFuZCBnaXQgIiRAIgogICAgbG9jYWwgZXhpdF9jb2RlPSQ/CiAgICBpZiBbWyAkZXhpdF9jb2RlIC1lcSAwIF1dOyB0aGVuCiAgICAgICAgR0lUX1VORE9fSU5URVJOQUxfSE9PSz0xIGNvbW1hbmQgZ2l0LXVuZG8gLS1ob29rPSJnaXQgJCoiCiAgICBmaQogICAgcmV0dXJuICRleGl0X2NvZGUKfQoKCiMgU2V0IHVwIFBST01QVF9DT01NQU5EIHRvIGxvZyBzdWNjZXNzZnVsIGNvbW1hbmRzIGFmdGVyIGV4ZWN1dGlvbgppZiBbWyAteiAiJFBST01QVF9DT01NQU5EIiBdXTsgdGhlbgogIFBST01QVF9DT01NQU5EPSJsb2dfc3VjY2Vzc2Z1bF9naXRfY29tbWFuZCIKZWxzZQogIFBST01QVF9DT01NQU5EPSIkUFJPTVBUX0NPTU1BTkQ7IGxvZ19zdWNjZXNzZnVsX2dpdF9jb21tYW5kIgpmaQo='
EMBEDDED_ZSH_HOOK='IyBGdW5jdGlvbiB0byBzdG9yZSB0aGUgZ2l0IGNvbW1hbmQgdGVtcG9yYXJpbHkKc3RvcmVfZ2l0X2NvbW1hbmQoKSB7CiAgbG9jYWwgcmF3X2NtZD0iJDEiCiAgbG9jYWwgaGVhZD0ke3Jhd19jbWQlJSAqfQogIGxvY2FsIHJlc3Q9JHtyYXdfY21kIyIkaGVhZCJ9CiAgaWYgYWxpYXMgIiRoZWFkIiAmPi9kZXYvbnVsbDsgdGhlbgogICAgbG9jYWwgZGVmPSQoYWxpYXMgIiRoZWFkIikKICAgIGxvY2FsIGV4cGFuc2lvbj0ke2RlZiMqXCd9CiAgICBleHBhbnNpb249JHtleHBhbnNpb24lXCd9CiAgICByYXdfY21kPSIke2V4cGFuc2lvbn0ke3Jlc3R9IgogIGZpCiAgW1sgIiRyYXdfY21kIiA9PSBnaXRcICogXV0gfHwgcmV0dXJuCiAgR0lUX0NPTU1BTkRfVE9fTE9HPSIkcmF3X2NtZCIKfQoKIyBGdW5jdGlvbiB0byBsb2cgdGhlIGNvbW1hbmQgb25seSBpZiBpdCB3YXMgc3VjY2Vzc2Z1bApsb2dfc3VjY2Vzc2Z1bF9naXRfY29tbWFuZCgpIHsKICAjIENoZWNrIGlmIHdlIGhhdmUgYSBnaXQgY29tbWFuZCB0byBsb2cgYW5kIGlmIHRoZSBwcmV2aW91cyBjb21tYW5kIHdhcyBzdWNjZXNzZnVsCiAgaWYgW1sgLW4gIiRHSVRfQ09NTUFORF9UT19MT0ciICYmICQ/IC1lcSAwIF1dOyB0aGVuCiAgICBHSVRfVU5ET19JTlRFUk5BTF9IT09LPTEgY29tbWFuZCBnaXQtdW5kbyAtLWhvb2s9IiRHSVRfQ09NTUFORF9UT19MT0ciCiAgZmkKICAjIENsZWFyIHRoZSBzdG9yZWQgY29tbWFuZAogIEdJVF9DT01NQU5EX1RPX0xPRz0iIgp9CgphdXRvbG9hZCAtVSBhZGQtenNoLWhvb2sKYWRkLXpzaC1ob29rIHByZWV4ZWMgc3RvcmVfZ2l0X2NvbW1hbmQKYWRkLXpzaC1ob29rIHByZWNtZCBsb2dfc3VjY2Vzc2Z1bF9naXRfY29tbWFuZAo='
# ── End of embedded hook files ──────────────────────────────────────────────

set -e

# ── Inlined content from common.sh ──────────────────────────────────────────

# Color definitions - shared across all scripts
GRAY='\033[90m'
GREEN='\033[32m'
YELLOW='\033[33m'
RED='\033[31m'
BLUE='\033[34m'
RESET='\033[0m'

# Alternative name for compatibility
NC="$RESET"  # No Color (used in some scripts)

# Basic logging functions
log() { 
    echo -e "${GRAY}git-undo:${RESET} $1"
}

log_info() {
    echo -e "${BLUE}[INFO]${RESET} $*"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${RESET} $*"
}

log_error() {
    echo -e "${RED}[ERROR]${RESET} $*"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${RESET} $*"
} 

# _get_script_dir determines the directory of this file (common.sh) in a POSIX-portable way
#
# Works when:
#   • the script is executed directly (`bash install.sh`)
#   • the script is sourced from another Bash script
#   • the outer shell is zsh (she-bang ensures Bash runs underneath)
_get_script_dir() {
    # $1 = one element of ${BASH_SOURCE[@]} or the zsh %x expansion
    local src="$1"
    while [ -h "$src" ]; do # Resolve symlinks if any
        local dir
        dir="$(cd -P -- "$(dirname -- "$src")" && pwd)"
        src="$(readlink "$src")"
        [[ $src != /* ]] && src="$dir/$src"
    done

    # physical directory of the file itself
    local dir
    dir=$(cd -P -- "$(dirname -- "$src")" && pwd)
    # Because of how we store scripts: built executable scripts are in root
    # but helpers and sources are in `scripts` dir.
    # so always append scripts
    printf '%s/scripts' "$dir"
}

if [[ -n "${BASH_SOURCE[0]:-}" ]]; then               # Bash (she-bang path)
    SCRIPT_DIR="$(_get_script_dir "${BASH_SOURCE[0]}")"
else                                                  # POSIX sh execution
    SCRIPT_DIR="$(_get_script_dir "$0")"
fi
unset -f _get_script_dir

echo "SCRIPT DIR $SCRIPT_DIR"
# Coloring helpers

# Git-undo specific configuration
BIN_NAME="git-undo"
BIN_DIR=$(go env GOBIN 2>/dev/null || true)
[[ -z "$BIN_DIR" ]] && BIN_DIR="$(go env GOPATH)/bin"
BIN_PATH="$BIN_DIR/$BIN_NAME"

CFG_DIR="$HOME/.config/git-undo"
BASH_HOOK="$CFG_DIR/git-undo-hook.bash"
ZSH_HOOK="$CFG_DIR/git-undo-hook.zsh"
GIT_HOOKS_DIR="$CFG_DIR/hooks"
DISPATCHER_FILE="$GIT_HOOKS_DIR/git-hooks.sh"
DISPATCHER_SRC="$SCRIPT_DIR/git-undo-git-hook.sh"

REPO_OWNER="amberpixels"
REPO_NAME="git-undo"
GITHUB_REPO_URL="github.com/$REPO_OWNER/$REPO_NAME"
GITHUB_API_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME"
INSTALL_URL="https://raw.githubusercontent.com/$REPO_OWNER/$REPO_NAME/main/install.sh"

detect_shell() {
    # Method 1: Check $SHELL environment variable (most reliable for login shell)
    if [[ -n "$SHELL" ]]; then
        case "$SHELL" in
            *zsh*)
                echo "zsh"
                return
                ;;
            *bash*)
                echo "bash"
                return
                ;;
        esac
    fi

    # Method 2: Check shell-specific version variables
    if [[ -n "$ZSH_VERSION" ]]; then
        echo "zsh"
        return
    elif [[ -n "$BASH_VERSION" ]]; then
        echo "bash"
        return
    fi

    # If all methods fail
    echo "unknown"
}

get_latest_version() {
    local latest_release
    if command -v curl >/dev/null 2>&1; then
        latest_release=$(curl -s "$GITHUB_API_URL/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    elif command -v wget >/dev/null 2>&1; then
        latest_release=$(wget -qO- "$GITHUB_API_URL/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    else
        echo "error: curl or wget required for version check" >&2
        return 1
    fi

    if [[ -z "$latest_release" || "$latest_release" == "null" ]]; then
        echo "error: failed to fetch latest version" >&2
        return 1
    fi

    echo "$latest_release"
}

version_compare() {
    local version1="$1"
    local version2="$2"

    # Remove 'v' prefix if present
    version1=${version1#v}
    version2=${version2#v}

    # Extract base version (everything before the first dash)
    local base1=$(echo "$version1" | cut -d'-' -f1)
    local base2=$(echo "$version2" | cut -d'-' -f1)

    # Convert base versions to comparable format (e.g., 1.2.3 -> 001002003)
    local v1=$(echo "$base1" | awk -F. '{ printf("%03d%03d%03d\n", $1, $2, $3); }')
    local v2=$(echo "$base2" | awk -F. '{ printf("%03d%03d%03d\n", $1, $2, $3); }')

    # Compare base versions first
    if [[ "$v1" < "$v2" ]]; then
        echo "older"
    elif [[ "$v1" > "$v2" ]]; then
        echo "newer"
    else
        # Base versions are the same, check for development version indicators
        # If one has additional info (date, commit, branch) and the other doesn't,
        # the one with additional info is newer
        if [[ "$version1" == "$base1" && "$version2" != "$base2" ]]; then
            # version1 is base tag, version2 is development version
            echo "older"
        elif [[ "$version1" != "$base1" && "$version2" == "$base2" ]]; then
            # version1 is development version, version2 is base tag
            echo "newer"
        else
            # Both are either base tags or both are development versions
            echo "same"
        fi
    fi
}

install_dispatcher_into() {
    local target="$1"

    # Validate target directory
    if [[ -z "$target" ]]; then
        log_error "Target directory not specified"
        return 1
    fi

    log "Installing git hooks into: $target"

    # Create target directory if it doesn't exist
    if ! mkdir -p "$target" 2>/dev/null; then
        log_error "Failed to create hooks directory: $target"
        return 1
    fi

    # 1) Install the dispatcher script only if target is our managed hooks directory
    if [[ "$target" == "$GIT_HOOKS_DIR" ]]; then
        log "Installing dispatcher script to: $DISPATCHER_FILE"

        # Debug: Check if source file exists
        echo "AAAA $DISPATCHER_SRC"
        if [[ ! -f "$DISPATCHER_SRC" ]]; then
            log_error "Source dispatcher script not found: $DISPATCHER_SRC"
            log_error "DISPATCHER_SRC variable: '$DISPATCHER_SRC'"
            log_error "Contents of script directory:"
            ls -la "$(dirname "$DISPATCHER_SRC")" 2>/dev/null || log_error "Cannot list script directory"
            return 1
        fi

        log "Source file exists: $DISPATCHER_SRC"
        log "Source file permissions: $(ls -l "$DISPATCHER_SRC")"

        # Ensure the hooks directory exists
        if ! mkdir -p "$GIT_HOOKS_DIR" 2>/dev/null; then
            log_error "Failed to create git hooks directory: $GIT_HOOKS_DIR"
            return 1
        fi

        log "Target directory exists: $GIT_HOOKS_DIR"
        log "Target directory permissions: $(ls -ld "$GIT_HOOKS_DIR")"

        # Try using cp instead of install command for better compatibility
        if cp "$DISPATCHER_SRC" "$DISPATCHER_FILE" 2>/dev/null; then
            chmod 755 "$DISPATCHER_FILE" 2>/dev/null || {
                log_error "Failed to set permissions on dispatcher script"
                return 1
            }
            log "Dispatcher copied and permissions set successfully"
        else
            log_error "Failed to copy dispatcher script from $DISPATCHER_SRC to $DISPATCHER_FILE"
            log_error "Let's try to understand why:"

            # More detailed debugging
            log_error "Source file readable? $(test -r "$DISPATCHER_SRC" && echo "YES" || echo "NO")"
            log_error "Target directory writable? $(test -w "$GIT_HOOKS_DIR" && echo "YES" || echo "NO")"
            log_error "Disk space available? $(df -h "$GIT_HOOKS_DIR" | tail -1)"

            return 1
        fi
    fi

    # 2) Wire up post-commit & post-merge hooks
    for hook in post-commit post-merge; do
        local hook_file="$target/$hook"
        log "Processing hook: $hook_file"

        if [[ -f "$hook_file" && ! -L "$hook_file" ]]; then
            # Existing regular file - append our hook call if not already present
            log "Found existing hook file, checking if git-undo is already integrated"

            if ! grep -q 'git-undo --hook' "$hook_file" 2>/dev/null; then
                log "Adding git-undo integration to existing hook"
                {
                    echo ""
                    echo "# git-undo integration"
                    echo "GIT_UNDO_INTERNAL_HOOK=1 git-undo --hook=\"$hook\""
                } >> "$hook_file"

                # Ensure it's executable
                chmod +x "$hook_file" 2>/dev/null || {
                    log_error "Failed to make hook executable: $hook_file"
                    return 1
                }
                log "Successfully integrated with existing $hook hook"
            else
                log "git-undo already integrated in $hook hook"
            fi

        elif [[ -L "$hook_file" ]]; then
            # It's a symlink - check if it points to our dispatcher
            local link_target
            link_target=$(readlink "$hook_file" 2>/dev/null || echo "")

            if [[ "$link_target" != "$DISPATCHER_FILE" ]]; then
                log_warning "Hook $hook_file is a symlink to $link_target, not our dispatcher"
                log "This hook may not work with git-undo"
            else
                log "Hook $hook_file already points to our dispatcher"
            fi

        else
            # No hook exists yet - create one
            log "Creating new $hook hook"

            # Try to create a symlink first (preferred method)
            if ln -sf "$DISPATCHER_FILE" "$hook_file" 2>/dev/null; then
                log "Created symlink: $hook_file -> $DISPATCHER_FILE"
            else
                # Fallback for filesystems that don't support symlinks
                log "Symlink failed, creating standalone hook script"
                cat > "$hook_file" << EOF
# git-undo hook - auto-generated
set -e
GIT_UNDO_INTERNAL_HOOK=1 git-undo --hook="$hook"
EOF
                chmod +x "$hook_file" 2>/dev/null || {
                    log_error "Failed to make hook executable: $hook_file"
                    return 1
                }
                log "Created standalone hook: $hook_file"
            fi
        fi
    done

    log "Hook installation completed for: $target"
    return 0
}
# ── End of inlined content ──────────────────────────────────────────────────

# Function to write an embedded hook file
write_embedded_hook() {
    local target_file="$1"
    local embedded_var="$2"

    # Decode the base64 embedded content and write it to the target file
    echo "${!embedded_var}" | base64 -d > "$target_file" 2>/dev/null || return 1
    chmod 644 "$target_file" 2>/dev/null || return 1
    return 0
}

install_shell_hook() {
    local shell_type="$1"
    local is_noop=true

    # Create config directory with proper permissions
    if [ ! -d "$CFG_DIR" ]; then
        mkdir -p "$CFG_DIR" 2>/dev/null || return 1
        chmod 755 "$CFG_DIR" 2>/dev/null || return 1
        is_noop=false
    fi

    case "$shell_type" in
        "zsh")
            local rc_file="$HOME/.zshrc"
            local source_line="source ~/.config/git-undo/git-undo-hook.zsh"

            # Write the embedded hook file
            if [ ! -f "$ZSH_HOOK" ]; then
                write_embedded_hook "$ZSH_HOOK" "EMBEDDED_ZSH_HOOK" || return 1
                is_noop=false
            fi

            # Add source line to .zshrc if not already present
            if ! grep -qxF "$source_line" "$rc_file" 2>/dev/null; then
                echo "$source_line" >> "$rc_file" 2>/dev/null || return 1
                is_noop=false
            fi
            ;;

        "bash")
            local source_line="source ~/.config/git-undo/git-undo-hook.bash"

            # Determine which embedded hook to use
            local embedded_var="EMBEDDED_BASH_HOOK"
            if [[ "${GIT_UNDO_TEST_MODE:-}" == "true" ]]; then
                embedded_var="EMBEDDED_BASH_TEST_HOOK"
            fi

            # Write the embedded hook file
            if [ ! -f "$BASH_HOOK" ]; then
                write_embedded_hook "$BASH_HOOK" "$embedded_var" || return 1
                is_noop=false
            fi

            # Determine which bash config file to use
            local rc_file
            if [[ "$OSTYPE" == "darwin"* ]]; then
                # macOS uses .bash_profile for login shells (default in Terminal.app)
                rc_file="$HOME/.bash_profile"
            else
                # Linux typically uses .bashrc for interactive shells
                rc_file="$HOME/.bashrc"
            fi

            # Add source line to the appropriate file if not already present
            if ! grep -qxF "$source_line" "$rc_file" 2>/dev/null; then
                echo "$source_line" >> "$rc_file" 2>/dev/null || return 1
                is_noop=false
            fi
            ;;

        *)
            return 1
            ;;
    esac

    # Return 2 if no changes were made (already installed)
    if $is_noop; then
        return 2
    fi
    return 0
}

main() {
    log "Starting installation..."

    local skip_binary=false
    local detected_go="go-unknown"

    if ! command -v go >/dev/null 2>&1; then
        echo -e "${GRAY}git-undo:${RESET} 1. Installing Go binary... ${RED}FAILED${RESET} Go not found. ${RED}Go 1.22+ is required to build the binary.${RESET}"
        skip_binary=true
    else
        # Extract major & minor (works for go1.xx and goX.YY)
        local ver_raw ver_major ver_minor
        ver_raw=$(go version | awk '{print $3}')       # e.g. go1.22.1
        ver_major=$(printf '%s\n' "$ver_raw" | sed -E 's/go([0-9]+).*/\1/')
        ver_minor=$(printf '%s\n' "$ver_raw" | sed -E 's/go[0-9]+\.([0-9]+).*/\1/')
        detected_go="$ver_raw"

        if  (( ver_major < 1 )) || { (( ver_major == 1 )) && (( ver_minor < 22 )); }; then
            echo -e "${GRAY}git-undo:${RESET} 1. Installing Go binary... ${RED}FAILED${RESET} Detected Go ${YELLOW}${ver_raw}${RESET}, but Go ${RED}≥ 1.22${RESET} is required."
            skip_binary=true
        fi
    fi

    if ! $skip_binary; then
         # 1) Install the binary
         echo -en "${GRAY}git-undo:${RESET} 1. Installing Go binary (${BLUE}${detected_go}${RESET}) ..."

         # Check if we're in dev mode with local source available
         if [[ "${GIT_UNDO_DEV_MODE:-}" == "true" && -d "./cmd/git-undo" && -f "./Makefile" ]]; then
             echo -e " ${YELLOW}(dev mode)${RESET}"
             log "Building from local source using Makefile..."

             # Use Makefile's binary-install target which has proper version logic
             if make binary-install &>/dev/null; then
                 # Get the version that was just installed
                 INSTALLED_VERSION=$(git-undo --version 2>/dev/null  || echo "unknown")
                 echo -e "${GRAY}git-undo:${RESET} Binary installed with version: ${BLUE}$INSTALLED_VERSION${RESET}"
             else
                 echo -e "${GRAY}git-undo:${RESET} ${RED}Failed to build from source using Makefile${RESET}"
                 exit 1
             fi
         else
             # Normal user installation from GitHub
             if go install "$GITHUB_REPO_URL/cmd/$BIN_NAME@latest" 2>/dev/null; then
                   BIN_PATH=$(command -v git-undo || echo "$BIN_DIR/$BIN_NAME")
                   INSTALLED_VERSION=$(git-undo --version 2>/dev/null  || echo "unknown")
                   echo -e " ${GREEN}OK${RESET} (installed at ${BLUE}${BIN_PATH}${RESET} | version=${BLUE}${INSTALLED_VERSION}${RESET})"
             else
                 echo -e " ${RED}FAILED${RESET}"
                 exit 1
             fi
         fi
    fi

    # 2) Git hooks integration
    echo -en "${GRAY}git-undo:${RESET} 2. Git integration..."

    current_hooks_path=$(git config --global --get core.hooksPath || echo "")
    target_hooks_path="$GIT_HOOKS_DIR"

    if [[ -z "$current_hooks_path" ]]; then
        git config --global core.hooksPath "$target_hooks_path"
        install_dispatcher_into "$target_hooks_path"
        echo -e " ${GREEN}OK${RESET} (set core.hooksPath)"
    elif [[ "$current_hooks_path" == "$target_hooks_path" ]]; then
        install_dispatcher_into "$target_hooks_path"
        echo -e " ${YELLOW}SKIP${RESET} (already configured)"
    else
        install_dispatcher_into "$current_hooks_path"
        echo -e " ${YELLOW}SHARED${RESET} (pig-backed on $current_hooks_path)"
    fi

    # 3) Shell integration
    local current_shell
    current_shell=$(detect_shell)
    echo -en "${GRAY}git-undo:${RESET} 3. Shell integration (${BLUE}$current_shell${RESET})..."

    # Temporarily disable set -e to capture non-zero exit codes
    set +e
    local hook_output
    hook_output=$(install_shell_hook "$current_shell" 2>&1)
    local hook_status=$?
    set -e

    case $hook_status in
        0)
            echo -e " ${GREEN}OK${RESET}"
            ;;
        2)
            echo -e " ${YELLOW}SKIP${RESET} (already configured)"
            ;;
        *)
            echo -e " ${RED}FAILED${RESET}"
            log "You can manually source the appropriate hook file from ${YELLOW}$CFG_DIR${RESET}"
            exit 1
            ;;
    esac

    # 3) Final message
    log "${GREEN}Installation completed successfully!${RESET}"
    echo -e ""
    echo -e "Please restart your shell or run '${YELLOW}source ~/.${current_shell}rc${RESET}' to activate ${BLUE}git-undo${RESET}"
}

main "$@"
